**FCFS**

#include<stdio.h>
int main()
{
    int n,wt[20],bt[20],tat[20],avwt=0,avtat=0,i,j;
    printf("\n Enter the number of processes(maximum 20): ");
    scanf("%d",&n);
    printf("\n Enter process burst time: ");
    for(i=0;i<n;i++)
    {
        printf("P[%d]:",i+1);
        scanf("%d",&bt[i]);
    }
    wt[0]=0; //waiting time for first process is 0
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]+=bt[j];
        }
    }
    printf("\n Process \t\tBurst Time \tWaiting Time \tTurnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
        avwt+=wt[i];
        avtat+=tat[i];
        printf("\nP[%d]\t\t%d\t\t%d\t\t%d",i+1,bt[i],wt[i],tat[i]);
    }
    avwt/=i;
    avtat/=i;
    printf("\nAverage waiting time : %d",avwt);
    printf("\nAverage turnaround time : %d",avtat);
    return 0;
}

**SJF**

#include<stdio.h>
void main()
{
    int wt[20],bt[20],p[20],tat[20],i,j,n,total=0,pos,temp;
    float avg_wt,avg_tat;
    printf("\n Enter no.of processes: ");
    scanf("%d",&n);
    printf("\n Enter process burst time:");
    for(i=0;i<n;i++)
    {
        printf("P[%d]:",i+1);
        scanf("%d",&bt[i]);
        p[i]=i+1;
    }
    //arranging bt in ascending order using selection sort
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(bt[j]<bt[pos])
                pos=j;
        }
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
        
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++){
            wt[i]+=bt[j];
        }
        total+=wt[i];
    }
    avg_wt=(float)total/n;
    total=0;
    printf("\nProcess \t Burst Time \t Waiting Time \t Turnaround Time");
    for(i=0;i<n;i++)
    {
        tat[i]=wt[i]+bt[i];
        total+=tat[i];
        printf("\n p%d\t\t%d \t\t%d \t\t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
    avg_tat=(float)total/n;
    printf("\n Average waiting time : %f",avg_wt);
    printf("\n Average Turnaround Time : %f",avg_tat);
    // return 0;
}


**PSA**

#include<stdio.h>
int main()
{
    int bt[20],wt[20],tat[20],p[20],pr[20],i,j,n,total=0,pos,temp,avg_wt,avg_tat;
    printf("\n Enter no.of processes : ");
    scanf("%d",&n);
    printf("\n Enter burst time and priority : ");
    for(i=0;i<n;i++)
    {
        printf("P[%d]:",i+1);
        printf("Burst Time : ");
        scanf("%d",&bt[i]);
        printf("Priority : ");
        scanf("%d",&pr[i]);
        p[i]=i+1;
    }
    //sorting in ascending order
    for(i=0;i<n;i++)
    {
        pos=i;
        for(j=i+1;j<n;j++)
        {
            if(pr[j]<pr[pos])
            pos=j;
        }
        temp=bt[i];
        bt[i]=bt[pos];
        bt[pos]=temp;
        
        temp=pr[i];
        pr[i]=pr[pos];
        pr[pos]=temp;
        
        temp=p[i];
        p[i]=p[pos];
        p[pos]=temp;
    }
    wt[0]=0;
    for(i=1;i<n;i++)
    {
        wt[i]=0;
        for(j=0;j<i;j++)
        {
            wt[i]+=bt[j];
        }
        total+=wt[i];
    }
    avg_wt=total/n;
    total=0;
    printf("\nProcess \tBurst Time \tWaiting Time \tTurnaround Time");
    
    for(i=0;i<n;i++)
    {
        tat[i]=bt[i]+wt[i];
        total+=tat[i];
        printf("\np%d\t\t%d \t\t%d \t\t%d",p[i],bt[i],wt[i],tat[i]);
    }
    avg_tat=total/n;
    printf("\n Average waiting time : %d",avg_wt);
    printf("\n Average turnaround time : %d",avg_tat);
return 0;
}

**ROUND ROBIN**

#include<stdio.h>
 
int main()
{
 
  int count,j,n,time,remain,flag=0,time_quantum;
  int wait_time=0,turnaround_time=0,at[10],bt[10],rt[10];
  printf("Enter Total Process:\t ");
  scanf("%d",&n);
  remain=n;
  for(count=0;count<n;count++)
  {
    printf("Enter Arrival Time and Burst Time for Process Process Number %d :",count+1);
    scanf("%d",&at[count]);
    scanf("%d",&bt[count]);
    rt[count]=bt[count];
  }
  printf("Enter Time Quantum:\t");
  scanf("%d",&time_quantum);
  printf("\n\nProcess\t|Turnaround Time|Waiting Time\n\n");
  for(time=0,count=0;remain!=0;)
  {
    if(rt[count]<=time_quantum && rt[count]>0)
    {
      time+=rt[count];
      rt[count]=0;
      flag=1;
    }
    else if(rt[count]>0)
    {
      rt[count]-=time_quantum;
      time+=time_quantum;
    }
    if(rt[count]==0 && flag==1)
    {
      remain--;
      printf("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
      wait_time+=time-at[count]-bt[count];
      turnaround_time+=time-at[count];
      flag=0;
    }
    if(count==n-1)
      count=0;
    else if(at[count+1]<=time)
      count++;
    else
      count=0;
  }
  printf("\nAverage Waiting Time= %f\n",wait_time*1.0/n);
  printf("Avg Turnaround Time = %f",turnaround_time*1.0/n);
  
  return 0;
}


**Banker**


#include<stdio.h>
int max[10][10], allocation[10][10], need[10][10];
int avail[10];
int np,nr;

void readmatrix(int matrix[10][10])
{
    int i,j;
    for(i=0;i<np;i++)
    for(j=0;j<nr;j++)
    scanf("%d",&matrix[i][j]);
}

void display_matrix(int matrix[10][10])
{
    int i,j;
    for(i=0;i<np;i++)
    {
        printf("\n P%d",i);
        for(j=0;j<nr;j++)
        {
            printf("%d",matrix[i][j]);
        }
    }
}

void calculate_need()
{
    int i,j;
    for(i=0;i<np;i++)
    for(j=0;j<nr;j++)
    need[i][j]=max[i][j]-allocation[i][j];
}

void banker()
{
    int i,j,k=0,flag;
    int finish[10],safe_seq[10];
    for(i=0;i<np;i++)
    {
        finish[i]=0; //Declare all processes as incomplete
    }
    for(j=0;j<nr;j++)
    {
        flag=0;
        if(finish[i]=0)
        {
            for(j=0;j<nr;j++)
            {
                if(need[i][j]>avail[j])
                {
                    flag=1;
                    break;
                }
            }
            if (flag==0)
            {
                finish[i]=1;
                safe_seq[k]=i;
                k++;
                //add allocated resources to finished processes
                for(j=0;j<nr;j++)
                avail[j]+=allocation[i][j];

                //check from 1st process
                i=-1;
            }
            
        }
    }
    flag=0; //check if all processes are completed
    for(i=0;i<np;i++)
    {
        if(finish[i]==0)
        {
            printf("\n System is in deadlock state\n");
            flag=1;
            break;
        }
    }
    if(flag==0)
    {
        printf("\n System is in safe state. \n Safe sequence is ==> \n");
        for(i=0;i<np;i++)
        printf("P%d",safe_seq[i]);
    }
}

int main()
{
    int j;

//read input
{
    printf("\n Enter the number of processes: \n");
    scanf("%d",&np);
    printf("\n Enter the number of resources: \n");
    scanf("%d",&nr);
    printf("\n Enter the allocation matrix: \n");
    readmatrix(allocation);
    printf("\n Enter the maximum requirement: \n");
    readmatrix(max);
    printf("\n Enter the availability: \n");
    for(j=0;j<nr;j++)
    scanf("%d",&avail[j]);
}

//Display entered input
{
    printf("\n ****Entered Data**** \n\n\n");
    printf("\n Initial allocation matrix: \n");
    display_matrix(allocation);
    printf("\n Maximum Requirement: \n");
    display_matrix(max);
    printf("\n Availability matrix: \n");
    for(j=0;j<nr;j++)
    printf("%d",avail[j]);
}

//calculate and display need
{
    calculate_need();
    printf("\n Need is : \n\n");
    display_matrix(need);
}

//Execute process using bankers algo
    banker();
    printf("\n\n\n\n");
    return 0;
};




**LRU**

#include<stdio.h>
// #include<conio.h>

int lru(int time[],int n)
{
    int i,minimum=time[0],loc=0;
    for(i=1;i<n;i++)
    {
        if(time[i]<minimum)
        {
            minimum=time[i];
            loc=i;
        }
    }
    return loc;
}

int main()
{
    int frame[10],page[30],np,nf,faults=0,count=0,flag1,flag2,i,j,loc=0;
    int time[10];
    
    printf("\n Enter the number of frames: \n");
    scanf("%d",&nf);
    
    printf("\n Enter the number of pages: \n");
    scanf("%d",&np);
    
    printf("\n Enter reference string: \n");
    for(i=0;i<np;i++)
    {
        scanf("%d",&page[i]);
    }
    
    for(i=0;i<np;i++){
    frame[i]=-1;
    }

//case-1
    for(i=0;i<np;i++){
        flag1=flag2=0;
        for(j=0;j<nf;j++){
            if(frame[j]==page[i]){
                count++;
                time[j]=count;
                    flag1=flag2=1;
                    break;
            }
        }

//case-2
    if(flag1==0){
        for(j=0;j<nf;j++){
            if(frame[j]==-1){
                // frame[j]=page[i];
                count++;
                faults++;
                frame[j]=page[i];
                time[j]=count;
                flag2=1;
                break;
            }
        }
    }

//case-3
    if(flag2==0){
        loc=lru(time,nf);
        count++;
        faults++;
        frame[loc]=page[i];
        time[loc]=count;
    }
    
    printf("\n");
    
    for(j=0;j<nf;j++){
        printf("%d\t",frame[j]);
    }
    }
    printf("\n\nTotal page faults = %d", faults);
    return 0;
}

**OPTIMAL**

#include<stdio.h>
int main()
{
    int nf, np, frame[10], page[30], temp[10], flag1, flag2, flag3, i, j, k, loc, max, faults = 0;
    printf("Enter number of frames: ");
    scanf("%d", &nf);
    
    printf("Enter number of pages: ");
    scanf("%d", &np);
    
    printf("Enter page reference string: ");
    
    for(i = 0; i < np; i++){
        scanf("%d", &page[i]);
    }
    
    for(i = 0; i < nf; i++){
        frame[i] = -1;
    }
    
    for(i = 0; i < np; ++i){
        flag1 = flag2 = 0;
        
        for(j = 0; j < nf; ++j){
            if(frame[j] == page[i]){
                   flag1 = flag2 = 1;
                   break;
               }
        }
        
        if(flag1 == 0){
            for(j = 0; j < nf; ++j){
                if(frame[j] == -1){
                    faults++;
                    frame[j] = page[i];
                    flag2 = 1;
                    break;
                }
            }    
        }
        
        if(flag2 == 0){
         flag3 =0;
        
            for(j = 0; j < nf; ++j){
             temp[j] = -1;
            
             for(k = i + 1; k < np; ++k){
             if(frame[j] == page[k]){
             temp[j] = k;
             break;
             }
             }
            }
            
            for(j = 0; j < nf; ++j){
             if(temp[j] == -1){
             loc = j;
             flag3 = 1;
             break;
             }
            }
            
            if(flag3 ==0){
             max = temp[0];
             loc = 0;
            
             for(j = 1; j < nf; ++j){
             if(temp[j] > max){
             max = temp[j];
             loc = j;
             }
             }            
            }
frame[loc] = page[i];
faults++;
        }
        
        printf("\n");
        
        for(j = 0; j < nf; ++j){
            printf("%d\t", frame[j]);
        }
    }
    
    printf("\n\nTotal Page Faults = %d", faults);
    
    return 0;
}
